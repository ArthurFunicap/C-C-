Obs:

1. A chave primária do arquivo é o campo "placa" do tipo String
2. A função de hashing a ser utilizada é a que implementa o *método da permutação para chaves alfanuméricas* visto em sala
3. Para resolver as colisões, utilizar *encadeamento externo*. As listas encadeadas do encadeamento externo devem ser ORDENADAS
4. O N utilizado deve ser 53



int hashing(char placa[]) {
	/* A fun��o �hashing� recebe com par�metro a chave (ou seja, a placa) e 
	* retorna o valor calculado segundo o m�todo da permuta��o para chaves alfanum�ricas 
	* (visto em sala).
	*/
}


void cadastrar(FILE* arq, NO* tabelaHashing[]) {
	/* Cadastrar o registro do carro no arquivo e inserir a chave (placa) na tabela de hashing.
	* 1 - Solicita a placa do carro a ser cadastrado.
	* 2 - Procura pela placa na tabela de hashing.
	* 3 - Caso encontre, informa que o carro j� est� no cadastro.
	* 4 - Caso n�o encontre, solicita os demais dados do carro, o insere no final do arquivo.
	* 5 - Insere a chave, juntamente com sua posi��o no arquivo, na tabela de hashing.
	*     Utilize para isso o procedimento "inserirTabelaHash".
	*/
}


void inserirTabelaHash(NO* tabelaHashing[], char placa[], int pos) {
	/* Inserir na tabela hashing, na lista encadeada indicada pela fun��o de hashing, 
	* uma chave e sua posi��o no arquivo.
	* 1 - Aplicar a fun��o de hashing � chave (ou seja, a placa)
	* 2 - O resultado da fun��o indica a posi��o na tabela onde a chave ser� inserida
	* 3 - Criar n�, preencher com a chave e a posi��o dela no arquivo e inserir na tabela, 
	* na lista encadeada correspondente, de forma que a lista permane�a ordenada.
	*/
}


int buscar(NO* tabelaHashing[], char placa[]) {
	/* procurar na tabela de hashing a placa desejada e retornar a posi��o da placa no arquivo
	   1 - aplicar a fun��o de hashing na chave (ou seja, na placa)
	   2 - procurar a chave na lista indicada pelo resultado da fun��o (usar busca sequencial melhorada)
	   3 - caso encontre, retornar a posi��o da chave no arquivo
	   4 - caso n�o encontre, retornar -1 */
}


void consultar(FILE* arq, NO* tabelaHashing[]) {
	/* Consultar o registro do carro no arquivo
     * 1 - Solicita a placa do carro a ser consultado.
     * 2 - Procura pela placa na tabela de hashing.
     * 3 - Caso n�o encontre, informa que o carro n�o est� no cadastro.
     * 4 - Caso encontre, vai ao arquivo, na posi��o indicada, 
	 *     l� o registro do carro e exibe seus dados.
    */
}


void removerTabelaHash(NO* tabelaHashing[], char placa[], int posTabela) {
	/* Remover da tabela de hashing o n� que contem a placa passada como par�metro. 
	* Recebe como par�metro tamb�m a posi��o na tabela onde a chave se encontra.
	*/
}


void exibirCadastro(FILE* arq) {
	/* Exibe todos os registros de carros ATIVOS constantes no arquivo. */
}


void remover(FILE* arq, NO* tabelaHashing[]) {
	/* Remover o registro do carro do arquivo
	 * 1 - Solicita a placa do carro a ser removido.
	 * 2 - Procura pela placa na tabela de hashing.
	 * 3 - Caso n�o encontre, informa que o carro n�o est� no cadastro.
	 * 4 - Caso encontre, vai ao arquivo, na posi��o indicada, l� o registro do carro e exibe seus dados.
	 *     Pergunta ao usu�rio se deseja realmente remov�-lo. 
	 *     Efetiva a remo��o que consiste em alterando no arquivo o STATUS 
	       do registro do carro para 0 (removido).
	 * 5 - Remove o n� que cont�m a chave, juntamente com sua posi��o no arquivo, da tabela de hashing.
	*      Utilize para isso o procedimento "removerTabelaHash".
	*/
}


void alterar(FILE* arq, NO* tabelaHashing[]) {
	/* Alterar o registro do carro no arquivo
	 * 1 - Solicita a placa do carro a ser alterado.
	 * 2 - Procura pela placa na tabela de hashing.
	 * 3 - Caso n�o encontre, informa que o carro n�o est� no cadastro.
	 * 4 - Caso encontre, vai ao arquivo, na posi��o indicada, l� o registro do carro e exibe seus dados.
	 *     Pergunta ao usu�rio quais dados deseja alterar. Efetiva a altera��o dos dados no arquivo.
	*/
}


void fecharArquivo(FILE* arq) {
	/* Apagar, fisicamente, os registros que foram deletados logicamente.
	* 1 - Criar um arquivo novo (vazio).
	* 2 - Copiar todos os registros de STATUS igual a 1 do arquivo de carros para o arquivo novo.
	* 3 - Fechar os dois arquivos.
	* 4 - Remover o arquivo de carros.
	* 5 - Renomear o arquivo novo com o nome "carros.dat".
	*/
}
